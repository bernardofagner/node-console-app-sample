Considere os seguintes vetores:
A = [1, 3, 5, 4, 7, 6, 2, 8, 5, 9];
B = [4, 3, 5, 6, 1, 3, 2, 4, 1, 7, 5, 6, 4];
C = [
    {
        userId: 4,
        Name: 'Maedhros'
    },
    {
        userId: 2,
        Name: 'Thingol'
    },
    {
        userId: 5,
        Name: 'Glorfindel'
    },
    {
        userId: 1,
        Name: 'Feanor'
    },
    {
        userId: 3,
        Name: 'Eol'
    }
]

1 - Escreva um algoritmo que receba um valor numérico como parâmetro e verifique se o valor recebido como parâmetro é um dos elementos do array A. Caso seja, o método deve retornar <true>, ou <false> caso contrário. O resultado deve ser exibido no console;

2 - Escreva um algorítmo que crie um vetor de elementos não repetidos a partir dos elementos do vetor B. O resultado deve ser exibido no console;

3 - Escreva um algoritmo que encontre o maior valor numerico presente no vetor A. O resultado deve ser exibido no console;

4 - Escreva um algoritmo que encontre o menor valor numerico presente no vetor A. O resultado deve ser exibido no console;

5 - O reconhecimento de padrões é uma técnica utilizada em diversos algoritmos de busca para localizar itens específicos e todos partem da premissa de encontrar elementos ou a contagem da ocorrência desses elementos em um universo/aglomerado de informação. A funcionalidade "Pesquisar", usualmente acessada pelo atalho "ctrl + F" é uma aplicação prática deste tipo de algoritmo.

Escreva uma função capaz de contar todas as ocorrências de uma substring qualquer presente no texto presente no array D. A função deve receber o array D como parâmetro e retornar um número inteiro que representa a quantidade de vezes que a substring foi encontrada. Utilize o método 'Read()' da classe 'InputClass' em 'src/Utils' para receber a substring via console/terminal.

A cada busca realizada, o programa deve exibir o número de vezes que aquela substring ocorreu no texto e aguardar uma nova entrada de substring no console para realizar uma nova busca. A função deve ser finalizada quando o usuário digitar: 'Sair', 'SAIR', 's', 'S' ou 'sair'.

Desafio 1 - Escreva um algoritmo que seja capaz de ordenar todos os elementos numéricos presentes no array B em ordem crescente;

Desafio 2 - Escreva um algoritmo que seja capaz de ordenar todos os elementos presentes no array C em ordem crescente, o critério para a ordenação é o UserId;